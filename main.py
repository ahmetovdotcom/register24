import asyncio
import re
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup


from config import BOT_TOKEN, ADMIN_ID
from db import get_pool, get_person_by_phone, get_person_by_iin
from utils import calculate_age, format_person, add_user, is_user_allowed, get_user_list, remove_user, is_authorized
from keyboards import create_phone_buttons, keyboardToChannel
from datetime import datetime, timedelta




bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
pool = None


@dp.message(CommandStart())
async def cmd_start(message: Message):
    text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—É.\n\n"
        "üîç –í –±–∞–∑–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ <b>16 –º–∏–ª–ª–∏–æ–Ω–∞—Ö –≥—Ä–∞–∂–¥–∞–Ω</b>, —Å–æ–±—Ä–∞–Ω–Ω–∞—è –∏–∑ –Ω–µ–¥–∞–≤–Ω–µ–π —É—Ç–µ—á–∫–∏. "
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ <b>–ò–ò–ù</b> –∏–ª–∏ <b>–Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>.\n\n"
        "üìå <b>–§–æ—Ä–º–∞—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è:</b>\n"
        "‚îú –ò–ò–ù ‚Äî 12 —Ü–∏—Ñ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>040404540484</code>)\n"
        "‚îú –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚Äî 11 —Ü–∏—Ñ—Ä, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å 7 (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>77771113388</code>)\n"
        "‚îî –ù–µ –±–µ—Å–ø–æ–∫–æ–π—Ç–µ—Å—å –æ –ø—Ä–æ–±–µ–ª–∞—Ö, +, -, —Å–∫–æ–±–∫–∞—Ö ‚Äî –æ–Ω–∏ –æ–±—Ä–µ–∂—É—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
        "üì¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ò–ò–ù –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞:"
    )

    

    await message.answer(text, parse_mode="HTML", reply_markup=keyboardToChannel)

@dp.message(Command("users"))
async def list_users(message: Message):
    if message.from_user.id != ADMIN_ID:
        return

    users = get_user_list()
    if not users:
        await message.answer("üì≠ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return

    text = "üìã <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
    for uid, info in users.items():
        name = f"{info.get('first_name', '')} {info.get('last_name', '')}".strip()
        username = f"@{info.get('username')}" if info.get('username') else "‚Äî"
        text += f"‚Ä¢ <b>{name}</b> {username} ‚Äî <code>{uid}</code>\n/remove_{uid}\n\n"

    await message.answer(text, parse_mode="HTML")


@dp.message(F.text.startswith("/remove_"))
async def remove_user_command(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    user_id = int(message.text.split("_")[1])
    remove_user(user_id)
    await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω.")
    try:
        await bot.send_message(user_id, "‚ö†Ô∏è –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –±—ã–ª —É–¥–∞–ª—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    except:
        pass  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞



@dp.callback_query(F.data == "request_access")
async def request_access(callback: CallbackQuery):
    await callback.message.edit_text("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.")
    user = callback.from_user
    await callback.answer("‚è≥ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É.")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ 7 –¥–Ω–µ–π", callback_data=f"grant:{user.id}:7")],
        [InlineKeyboardButton(text="‚úÖ 14 –¥–Ω–µ–π", callback_data=f"grant:{user.id}:14")],
        [InlineKeyboardButton(text="‚úÖ 30 –¥–Ω–µ–π", callback_data=f"grant:{user.id}:30")],
        [InlineKeyboardButton(text="‚úÖ –ù–∞–≤—Å–µ–≥–¥–∞", callback_data=f"grant:{user.id}:0")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"deny:{user.id}")]
    ])

    await bot.send_message(ADMIN_ID,
        f"üì• –ó–∞–ø—Ä–æ—Å –æ—Ç @{user.username or '-'}\nID: {user.id}\n–ò–º—è: {user.first_name}",
        reply_markup=keyboard)
    
    
@dp.callback_query(F.data.startswith("grant:"))
async def grant_access(callback: CallbackQuery):
    _, user_id, days = callback.data.split(":")
    user_id = int(user_id)
    days = int(days)

    user = await bot.get_chat(user_id)

    # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
    if days == 0:
        until = "–±–µ—Å—Å—Ä–æ—á–Ω–æ"
    else:
        end_date = datetime.now() + timedelta(days=days)
        until = end_date.strftime("%d.%m.%Y")

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞—Ç–æ–π –æ–∫–æ–Ω—á–∞–Ω–∏—è
    add_user(user_id, user.first_name, user.last_name or "", user.username or "", days)

    await callback.answer("‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω.")

    # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await bot.send_message(
            user_id,
            f"‚úÖ –í–∞–º –≤—ã–¥–∞–Ω –¥–æ—Å—Ç—É–ø –¥–æ {until}." if days else "‚úÖ –í–∞–º –≤—ã–¥–∞–Ω –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø."
        )
    except:
        pass

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ (—É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ + –ø–∏—à–µ–º –∫–æ–º—É –≤—ã–¥–∞–Ω–æ)
    full_name = f"{user.first_name} {user.last_name}".strip()
    username = f"@{user.username}" if user.username else ""
    await callback.message.edit_text(
        f"‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {full_name} {username} (ID: <code>{user_id}</code>) –¥–æ <b>{until}</b>.",
        parse_mode="HTML"
    )

@dp.callback_query(F.data.startswith("deny:"))
async def deny_access(callback: CallbackQuery):
    _, user_id = callback.data.split(":")
    await callback.answer("‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
    try:
        await bot.send_message(user_id, "üö´ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
    except:
        pass










@dp.message(F.text)
@is_authorized
async def handle_input(message: Message, **kwargs):
    global pool
    text = message.text.strip()
    digits = re.sub(r"\D", "", text)

    loading_msg = await message.answer("üîç –ò–¥—ë—Ç –ø–æ–∏—Å–∫...")
    person = None  # ‚Üê –î–æ–±–∞–≤–∏–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é

    try:
        if len(digits) == 12:
            person = await get_person_by_iin(pool, digits)
            if person:
                result = "‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ –ò–ò–ù:\n\n" + format_person(person)
            else:
                result = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ò–ò–ù –Ω–µ –Ω–∞–π–¥–µ–Ω."

        elif len(digits) == 11 and digits.startswith("7"):
            person = await get_person_by_phone(pool, digits)
            if person:
                result = "‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ –Ω–æ–º–µ—Ä—É:\n\n" + format_person(person)
            else:
                result = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω."
        else:
            result = "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ò–ù (12 —Ü–∏—Ñ—Ä) –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (11 —Ü–∏—Ñ—Ä, –Ω–∞—á–∏–Ω–∞—è —Å 7)."

    except Exception as e:
        result = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}"

    await loading_msg.delete()

    if person:
        phones_raw = person['all_raw_numbers'] or ''
        phones_list = phones_raw.split(', ')
        keyboard = create_phone_buttons(phones_list)
        await message.answer(result, parse_mode="HTML", reply_markup=keyboard)
    else:
        await message.answer(result)

async def main():
    global pool
    pool = await get_pool()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())